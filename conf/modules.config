/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // publishDir = [
    //     path: { "${params.outdir}/${meta.id.replace('_normal', '').replace('_tumor', '').replace('_somatic', '')}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/" },
    //     mode: params.publish_dir_mode,
    //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    // ]

    withName: FASTQC {
        ext.args = '--quiet'
    }
    
    withName: BWA_MEM {
            // cache=false
            scratch=true
            ext.args = { "-R '@RG\\tID:${meta.id}\\tSM:${meta.id}\\tPL:ILLUMINA\\tLB:${meta.id}\\tPU:${meta.id}'" }
            // storeDir = { "${params.outdir}/storeDir/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/" }
    
    }

    withName: BWA_INDEX {
            // ext.args = { "-R '@RG\\tID:${meta.id}\\tSM:${meta.id}\\tPL:ILLUMINA\\tLB:${meta.id}\\tPU:${meta.id}'" }
            // storeDir = { "${params.outdir}/storeDir/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/" }   
            cache=false
    }

    withName: SAMTOOLS_FAIDX {
            // ext.args = { "-R '@RG\\tID:${meta.id}\\tSM:${meta.id}\\tPL:ILLUMINA\\tLB:${meta.id}\\tPU:${meta.id}'" }
            // storeDir = { "${params.outdir}/storeDir/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/" }   
            cache=false
    }


    withName: SAMTOOLS_FASTQ {
            ext.args = { "-N" }
            scratch=true
            // storeDir = { "${params.outdir}/storeDir/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${meta.id}" }   
    }

    withName: GATK4_MUTECT2 {
            ext.args = { "-normal ${meta.normal_id}" }
            publishDir = [
            path: { "${params.outdir}/${meta.id.replace('_somatic', '')}/" },
            saveAs: { filename -> 
                if (filename.equals('versions.yml')) {
                    return null  // Don't publish this file
                } else if (filename.endsWith('.vcf.gz')) {
                    return "mutect2/${filename}"  // Publish to subdirectory
                } else if (filename.endsWith('.stats')) {
                    return "mutect2/${filename}"  // Publish to subdirectory
                } 
                // else {
                //     return filename  // Publish with original name
                // }
            }
        ]
    }

    withName: GATK4_FILTERMUTECTCALLS {
            publishDir = [
            path: { "${params.outdir}/${meta.id.replace('_somatic', '')}/" },
            saveAs: { filename -> 
                if (filename.equals('versions.yml')) {
                    return null  // Don't publish this file
                } else if (filename.endsWith('.vcf.gz')) {
                    return "mutect2/${filename}"  // Publish to subdirectory
                } else if (filename.endsWith('.stats')) {
                    return "mutect2/${filename}"  // Publish to subdirectory
                } 
                // else {
                //     return filename  // Publish with original name
                // }
            }
        ]
    }

    withName: STRELKA_SOMATIC {
            publishDir = [
            path: { "${params.outdir}/${meta.id.replace('_somatic', '')}/" },
            saveAs: { filename -> 
                if (filename.equals('versions.yml')) {
                    return null  // Don't publish this file
                } else if (filename.endsWith('.vcf.gz')) {
                    return "strelka/${filename}"  // Publish to subdirectory
                } 
                // else {
                //     return filename  // Publish with original name
                // }
            }
        ]
    }

    withName: HLAHD {
            scratch=true
            storeDir = { "${params.outdir}/storeDir/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${meta.id}/" }   
            publishDir = [
            path: { "${params.outdir}/${meta.id.replace('_normal', '')}/" },
            saveAs: { filename -> 
                if (filename.equals('versions.yml')) {
                    return null  // Don't publish this file
                } else if (filename.endsWith('final.result.txt')) {
                    return "HLAHD/${filename}"  // Publish to subdirectory
                } 
                // else {
                //     return filename  // Publish with original name
                // }
            }
        ]
    }

    withName: CREATE_HLA_REFERENCE{
        cache=false
        publishDir = [
            path: { "${params.outdir}/${meta.id.replace('_normal', '')}/" },
            saveAs: { filename -> 
                if (filename.equals('versions.yml')) {
                    return null  // Don't publish this file
                } else if (filename.endsWith('fasta')) {
                    return "hlaref/${filename}"  // Publish to subdirectory
                } 
                // else {
                //     return filename  // Publish with original name
                // }
            }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
